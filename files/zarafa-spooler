# $Id: zarafa-spooler,v 1.9 2014/11/07 10:19:11 rusjako Exp $
###########################################################################
# This was written and is maintained by:
#    Stefan Jakobs <logwatch at localside.net>
#
# Please send all comments, suggestions, bug reports,
#    etc, to logwatch at localside.net.
###########################################################################
# Copyright (c) 2013 Stefan Jakobs
# Covered under the included MIT/X-Consortium License:
#    http://www.opensource.org/licenses/mit-license.php
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
###########################################################################

use warnings;
use strict;

my $Detail      = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;
my $Version     = "1.0-20140110";

# initialize logwatch variables 
my $ThisLine    = "";
my %OtherList   = ();

# other variables
my ($starts, $shutdowns) = ( 0, 0);
my %messageActions;
my (%smtpServers, %smtpStatus, %sendAs);
my (%errors, %warnings);

### Functions ###

sub print_asterisks() {
   printf "\n  ******** Details (%2i) ***************************************\n", $Detail;
}

sub print_line() {
   print  "  --------   --------------------------------------------------\n";
}

sub print_doubleline() {
   print  "  ========   ==================================================\n\n";
}

sub print_hash($$) {
   my $out = "";
   my $sum = 0;
   my %hash = %{$_[0]};
   my $desc = $_[1];
   foreach my $item (sort {$hash{$b} <=> $hash{$a}} keys %hash) {
      $out .= sprintf "  %8i      %s\n", $hash{$item}, $item;
      $sum += $hash{$item};
   }
   printf "\n  %8i   %-36s\n", $sum, $desc;
   if ($Detail > 4) {
      printf "$out";
   }
}

sub print_2xhash($$) {
   my $out = "";
   my $sum = 0;
   my %hash = %{$_[0]};
   my $desc = $_[1];
   foreach my $item (sort {$a cmp $b} keys %hash) {
         my $out2 = "";
         my $sum2 = 0;
         foreach my $item2 (sort {$hash{$item}{$b} <=> $hash{$item}{$a}} keys %{$hash{$item}}) {
            $out2 .= sprintf "  %8i         %s\n", $hash{$item}{$item2}, $item2;
            $sum2 += $hash{$item}{$item2};
         }
         $out .= sprintf "  %8i      %s\n", $sum2, $item;
         $sum += $sum2;
         if ($Detail > 9) { $out .= $out2; }
      }
   printf "\n  %8i   %-36s\n", $sum, $desc;
   if ($Detail > 4) {
      printf "$out";
   }
}

sub print_3xhash($$) {
   my $out = "";
   my $sum = 0;
   my %hash = %{$_[0]};
   my $desc = $_[1];
   foreach my $item (sort {$a cmp  $b} keys %hash) {
      my $out2 = "";
      my $sum2 = 0;
      foreach my $item2 (sort {$a cmp $b} keys %{$hash{$item}}) {
         my $out3 = "";
         my $sum3 = 0;
         foreach my $item3 (sort {$hash{$item}{$item2}{$b} <=> $hash{$item}{$item2}{$a}} keys %{$hash{$item}{$item2}}) {
            $out3 .= sprintf "  %8i            %s\n", $hash{$item}{$item2}{$item3}, $item3;
            $sum3 += $hash{$item}{$item2}{$item3};
         }
         $out2 .= sprintf "  %8i         %s\n", $sum3, $item2;
         $sum2 += $sum3;
         if ($Detail > 9) { $out2 .= $out3; }
      }
      $out .= sprintf "  %8i      %s\n", $sum2, $item;
      $sum += $sum2;
      if ($Detail > 4) { $out .= $out2; }
   }
   printf "\n  %8i   %-36s\n", $sum, $desc;
   if ($Detail > 4) {
      printf "$out";
   }
}


### Parse the lines ###

while (defined($ThisLine = <STDIN>)) {
   chomp($ThisLine);

   if (
      ( $ThisLine  =~ /^Connection to Zarafa server succeeded/) ||
      ( $ThisLine  =~ /^Empty row in OutgoingQueue$/)
   ) {
      # ignore
   }

   # TD: LMTP service shutdown complete
   elsif ($ThisLine =~ /^Spooler shutdown complete$/) {
      $shutdowns++;
   }
   # TD: Starting zarafa-dagent LMTP mode version 7,1,7,42779 (42779), pid 11153
   elsif ($ThisLine =~ /^Starting zarafa-spooler version ([0-9,]+) \(\d+\), pid \d+$/) {
      $starts++;
   }
   # TD: Sending e-mail for user myuser, subject: 'foobar', size: 9719
   elsif ($ThisLine =~ /^Sending e-mail for user (\S+), subject:/) {
      $messageActions{'send for user'}{$1}++;
   }
   # TD: Sending message with Message-ID: foobar@example.com
   elsif ($ThisLine =~ /^Sending message with Message-ID:/) {
      # ignore
   }
   # TD: E-mail for user myuser was accepted by SMTP server
   elsif ($ThisLine =~ /^E-mail for user (\S+) was accepted by SMTP server$/) {
      $messageActions{'accepted by SMTP server'}{$1}++;
   }
   # TD: E-mail for user myuser could not be sent, notifying user
   elsif ($ThisLine =~ /^E-mail for user (\S+) could not be sent, notifying user$/) {
      $messageActions{'could not sent e-mail, notifying user'}{$1}++;
   }
   # TD: Invalid email address in recipient list found: "foo@example.com". Email Address is empty.
   elsif ($ThisLine =~ /^Invalid email address in recipient list found: .*\. (.*)$/) {
      $messageActions{'Invalid email address in recipient list found'}{$1}++;
   }
   # TD: Unable to connect to SMTP server, retrying mail for user myuser later
   elsif ($ThisLine =~ /^Unable to connect to SMTP server, retrying mail for user (\S+) later$/) {
      $messageActions{'SMTP connect failed: retrying mail later'}{$1}++;
   }
   # TD: Connect to SMTP: Greeting error.. E-Mail will be tried again later.
   elsif ($ThisLine =~ /^Connect to SMTP: (.*)\. (.*)$/) {
      $messageActions{"SMTP connect failed: $1"}{$2}++;
   }
   # TD: SMTP Error:5.1.3 Bad recipient address syntax
   elsif ($ThisLine =~ /^SMTP Error:(.+)$/) {
      $messageActions{'SMTP Error'}{$1}++;
   }
   # TD: SMTP: Error while executing command 'DATA'. Response: 5.5.1 Error: no valid recipients
   elsif ($ThisLine =~ /^SMTP: Error while executing command '(\S+)'\. Response: (.*)$/) {
      $messageActions{"SMTP Command: $1"}{$2}++;
   }
   # TD: Using SMTP server: server.example.com, port 25
   elsif ($ThisLine =~ /^Using SMTP server: (\S+), port (\d+)$/) {
      $smtpServers{"$1:$2"}++;
   }
   # FIXME: This is a Postfix pre-queue setup answer:
   # TD: SMTP: 2.0.0 from MTA(smtp:[127.0.0.1]:10025): 250 2.0.0 Ok: queued as AA8FD37EEC
   elsif ($ThisLine =~ /^SMTP: \d\.\d\.\d from MTA\(smtp:\[[0-9a-fA-F.:]+\]:\d{1,5}\): \d{3} (\d\.\d\.\d .*): /) {
      $smtpStatus{$1}++;
   }  
   # TD: SMTP: ENOTCONN: not connected. E-Mail will be tried again later.
   elsif ($ThisLine =~ /^SMTP: (ENOTCONN: not connected\. E-Mail will be tried again later\.)$/) {
      $smtpStatus{$1}++;
   }
   # TD: User 'Doe, John' is not allowed to send as user or group 'other@example.com'
   elsif ($ThisLine =~ /^User '([^']+)' is not allowed to send as user or group '([^']+)'/) {
      $sendAs{'not allowed'}{$1}{$2}++;
   }
   # TD: Mail for user 'Doe, John' is allowed on behalf of user 'User, My'
   # (zarafaSendAsPrivilege is no set; delegation allowed)
   elsif ($ThisLine =~ /^Mail for user '([^']+)' is allowed on behalf of user '([^']+)'$/) {
      $sendAs{'allowed on behalf of'}{"$1 ->"}{$2}++;
   }
   # TD: Mail for user 'Doe, John' is sent as user 'Myuser'
   # (zarafaSendAsPrivilege is set)
   elsif ($ThisLine =~ /^Mail for user '([^']+)' is sent as user '([^']+)'$/) {
      $sendAs{'allowed'}{"$1 ->"}{$2}++;
   }

   ## Errors
   # TD: Unable to open user session. Error 0x80040115
   elsif ($ThisLine =~ /^(Unable to open (?:admin|user) session). Error (0x[0-9a-fA-F]{8})$/) {
      $errors{$1}{$2}++;
   }
   # TD: Error while expanding group. Group: , error: 0x8004010f
   elsif ($ThisLine =~ /^(Error while expanding group\. Group: .*), error: (0x[0-9a-fA-F]{8})$/) {
      $errors{$1}{$2}++;
   }

   ## Warnings
   # TD: Unable to get outgoing queue count
   elsif ($ThisLine =~ /^Unable to get outgoing queue count$/) {
      $warnings{'Unable to get outgoing queue count'}++;
   }
   # TD: Still waiting for 0 threads to exit.
   elsif ($ThisLine =~ /^Still waiting for \d threads to exit\.$/) {
      $warnings{'Waiting for threads to exit'}++;
   }
   # TD: Server connection lost. Reconnecting in 3 seconds...
   elsif ($ThisLine =~ /^Server connection lost\. Reconnecting in \d+ seconds/) {
      $warnings{'Server connection lost. Reconnecting'}++;
   }
   # TD: Table reload requested, breaking server connection
   elsif ($ThisLine =~ /^(Table reload requested, breaking server connection)$/) {
      $warnings{$1}++;
   }
   # TD: E-mail for user myuser may not be sent, notifying user
   elsif ($ThisLine =~ /^E-mail for user (\S+) may not be sent, notifying user$/) {
      $warnings{"$1: E-mail for user may not be sent"}++;
   }
   # TD: Unable to create ical object, sending as TNEF
   elsif ($ThisLine =~ /^(Unable to create ical object, sending as TNEF)$/) {
     $warnings{$1}++;
   }
   
   # Report any unmatched entries...
   else {
      $OtherList{$ThisLine}++;
   }
}

## OUTPUT ##

# \t = 8 chars
# %-56s: %5i Time(s)

if ($starts) {
   printf "  %8i   %-36s\n", $starts, 'zarafa-spooler starts';
}
if ($shutdowns) {
   printf "  %8i   %-36s\n", $shutdowns, 'zarafa-spooler shutdowns';
}

if ($starts or $shutdowns) { 
   print_doubleline();
}
if (keys %warnings) {
   print_hash(\%warnings, 'Warnings');
}
if (keys %errors) {
   print_2xhash(\%errors, 'Errors');
}

if (keys %warnings or keys %errors) {
   print_asterisks();
}

if (keys %messageActions or keys %smtpServers or keys %smtpStatus) {
   print_2xhash(\%messageActions, 'Message Actions');
}
if (keys %smtpServers) {
   print_hash(\%smtpServers, 'SMTP Servers used');
}
if (keys %smtpStatus) {
   print_hash(\%smtpStatus, 'SMTP Status');
}
if (keys %sendAs) {
   print_3xhash(\%sendAs, 'Send as');
}

if (keys %OtherList) {
   print "\n**** Unmatched entries ****\n";
   foreach my $Error (keys %OtherList) {
      print "    $Error : $OtherList{$Error} Time(s)\n";
   }
}

